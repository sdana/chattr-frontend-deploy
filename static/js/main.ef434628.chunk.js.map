{"version":3,"sources":["Components/Api/Api.js","Components/Login/Login.js","Components/Login/Register.js","Components/Chatroom/PreviousMessages.js","Components/Chatroom/Chatroom.js","Components/Chatroom/PopulateChatroomList.js","Components/MainPage/MainPage.js","Components/Login/UserSettings.js","ApplicationViews.js","App.js","index.js","Components/img/lips.png"],"names":["ipAddr","api","userLogIn","username","password","fetch","concat","method","headers","Content-Type","body","JSON","stringify","Username","Password","then","response","text","userRegister","firstName","lastName","FirstName","LastName","userDetails","token","Authorization","sessionStorage","getItem","res","json","editUser","userEdits","userId","getAllChatrooms","Accept","getPreviousChatroomMessages","chatroomName","writeMessageToDb","message","chatName","MessageText","ChatroomName","UserId","e","catch","err","console","log","createChatRoom","roomName","Title","deleteChatRoom","chatId","Login","state","open","authenticated","register","handleFieldChange","evt","stateToChange","target","id","value","_this","setState","handleClose","handleLogin","preventDefault","setItem","registerNewAccount","_this2","this","react_default","a","createElement","Redirect","to","Fragment","style","display","flexDirection","justifyContent","alignItems","marginTop","index_es","variant","src","Teeth","alt","height","onSubmit","TextField_default","label","type","name","autoComplete","margin","autoFocus","required","onChange","Button_default","color","onClick","Dialog_default","onClose","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","Component","Register","redirect","alreadyRegistered","loginPage","email","registerUser","backToLogin","Typography_default","Lips","require","classes","avatar","withStyles","props","messages","map","index","className","key","user","avatarUrl","Avatar_default","AccountCircle_default","width","messageText","Chatroom","messageField","Paper_default","elevation","square","PreviousMessages","previousMessages","sendMessage","alert","placeholder","paddingLeft","onInput","list","PopulateChatroomList","handleClickOpen","createNewChatRoom","joinChatAfterCreate","removeChatroom","currentTarget","removeAllUsersFromChat","title","List_default","Divider_default","chatrooms","room","ListItem_default","button","toggleDrawer","ListItemText_default","primary","clearMessages","removeFromChatroom","setCurrentChatroom","RemoveCircle_default","chatroomId","aria-label","Add_default","fullWidth","window","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","MainPage","auth","anchorEl","logout","showDrawer","settingsPage","currentChatroom","componentDidMount","userToken","prevState","hubConnection","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Information","build","start","withCredentials","on","incomingMessage","groupName","newMessage","push","invoke","getUpdatedUserInfo","error","toString","clearMessagesOnRoomChange","removeItem","handleChange","event","checked","handleMenu","joinMessage","_this$state","Boolean","sideList","Chatroom_PopulateChatroomList","pathname","getUpdatedInfo","root","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","Menu_default","Drawer_default","tabIndex","role","onKeyDown","grow","aria-owns","aria-haspopup","core_Menu_default","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem_default","Chatroom_Chatroom_Chatroom","currentRoom","align","React","flexGrow","marginLeft","marginRight","fullList","plusIcon","typography","useNextVariants","headline","UserSettings","submitChanges","edits","Id","isActive","location","setUserInactive","Grid_default","containter","spacing","direction","justify","minHeight","item","defaultValue","fontSize","ApplicationViews","isAuthenticated","showSideMenu","sideMenu","Route","exact","path","component","App","ApplicationViews_ApplicationViews","ReactDOM","render","BrowserRouter","src_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ef434628.chunk.js","sourcesContent":["const ipAddr = \"localhost\"\r\nclass Api {\r\n\r\n\r\n    //User login method. Also receives bearer token to interact with restricted parts of API\r\n    userLogIn = (username, password) => {\r\n       return fetch(`http://${ipAddr}:5555/api/login`,{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                Username: username,\r\n                Password: password\r\n            })\r\n        }).then(response => response.text())\r\n    }\r\n\r\n    userRegister = (username, password, firstName,lastName) => {\r\n        return fetch(`http://${ipAddr}:5555/api/token`,{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                Username: username,\r\n                Password: password,\r\n                FirstName: firstName,\r\n                LastName: lastName\r\n            })\r\n        }).then(response => response.text())\r\n    }\r\n\r\n    userDetails = (token) => {\r\n        return fetch(`http://${ipAddr}:5555/api/user`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${sessionStorage.getItem(\"loginToken\")}`,\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(res => res.json())\r\n    }\r\n\r\n    editUser = (token, userEdits, userId) => {\r\n        return fetch(`http://${ipAddr}:5555/api/user/${userId}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(userEdits)\r\n        })\r\n    }\r\n\r\n    getAllChatrooms = (token) => {\r\n        return fetch(`http://${ipAddr}:5555/api/chatroom`,{\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                Accept: \"application/json\"\r\n            }\r\n        }).then(res => res.json())\r\n    }\r\n\r\n    getPreviousChatroomMessages = (token, chatroomName) => {\r\n        return fetch(`http://${ipAddr}:5555/api/message`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                chatroomName: chatroomName\r\n            }\r\n        }).then(res => res.json())\r\n    }\r\n\r\n    writeMessageToDb = (message, chatName, userId, token) => {\r\n        return fetch(`http://${ipAddr}:5555/api/message`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': \"application/json\",\r\n                'Accept': \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                MessageText: message,\r\n                ChatroomName: chatName,\r\n                UserId: userId\r\n            })\r\n        }).then(e => e.json()).catch(err => console.log(err))\r\n    }\r\n\r\n    createChatRoom = (token, roomName, userId) => {\r\n        return fetch(`http://${ipAddr}:5555/api/chatroom`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                Title: roomName,\r\n                userId: userId\r\n            })\r\n        }).then(res => res.json())\r\n    }\r\n\r\n    deleteChatRoom = (token, chatId) => {\r\n        return fetch(`http://${ipAddr}:5555/api/chatroom/${chatId}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            }\r\n        }).then(res => res.json())\r\n    }\r\n\r\n}\r\n\r\nconst api = new Api()\r\nexport default api","import React, { Component } from 'react'\r\nimport {Redirect} from \"react-router-dom\"\r\nimport api from \"../Api/Api\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Teeth from \"../img/lips.png\"\r\nimport 'typeface-roboto';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        open: false,\r\n        authenticated: false,\r\n        register: false,\r\n        username: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    // Update state whenever an input field is edited\r\n    handleFieldChange = evt => {\r\n        const stateToChange = {}\r\n        stateToChange[evt.target.id] = evt.target.value\r\n        this.setState(stateToChange)\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({open: false})\r\n    }\r\n\r\n    handleLogin = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"Working\")\r\n        api.userLogIn(this.state.username, this.state.password).then(token => {\r\n            if(token !== \"invalid\"){\r\n                sessionStorage.setItem(\"loginToken\", token)\r\n                this.setState({authenticated: true})\r\n            }\r\n            else {\r\n                this.setState({\r\n                    open: true,\r\n                    username: \"\",\r\n                    password: \"\"\r\n                })\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    registerNewAccount = (e) => {\r\n        e.preventDefault()\r\n        this.setState({register: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.authenticated){\r\n            return <Redirect to=\"/\" />\r\n        }\r\n        else if (this.state.register) {\r\n                return (\r\n                    <Redirect to=\"/register\" />\r\n                )\r\n        }\r\n        else\r\n        return(\r\n            <React.Fragment>\r\n                <div style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center', marginTop:30}}>\r\n                <span><Typography variant=\"h1\">CHATTR</Typography></span>\r\n                <img src={Teeth} alt=\"teeth\" style={{height:300}}/>\r\n                <form onSubmit={(e) => this.handleLogin(e)}>\r\n                <div style={{display:'flex',flexDirection:'row',justifyContent:\"space-around\"}}>\r\n                <TextField\r\n                    id=\"username\"\r\n                    label=\"Email\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    variant=\"outlined\"\r\n                    value={this.state.username}\r\n                    style={{margin:10}}\r\n                    autoFocus\r\n                    required\r\n                    onChange={this.handleFieldChange}\r\n                />\r\n                <TextField\r\n                    id=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    variant=\"outlined\"\r\n                    value={this.state.password}\r\n                    style={{margin:10}}\r\n                    required\r\n                    onChange={this.handleFieldChange}\r\n                />\r\n                </div>\r\n                <div style={{display:'flex',flexDirection:'row', justifyContent:'center'}}>\r\n                <Button variant=\"contained\" color=\"primary\" id=\"loginButton\" type=\"submit\" style={{margin:15}}>Login</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" id=\"registerButton\" style={{margin:15}} onClick={this.registerNewAccount}>New User?</Button>\r\n                </div>\r\n                </form>\r\n                </div>\r\n\r\n                {/* <-----------------Alert Dialog if login incorrect --------------------------------------------->*/}\r\n                <Dialog \r\n                        open={this.state.open}\r\n                        onClose={this.handleClose}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Incorrect Login\"}</DialogTitle>\r\n                         <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                I'm sorry, the login information is incorrect. Please try again.\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                            Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n            \r\n        </React.Fragment>\r\n        )\r\n \r\n   }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport {Redirect} from \"react-router-dom\"\r\nimport api from \"../Api/Api\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Lips from \"../img/lips.png\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport 'typeface-roboto';\r\n\r\nexport default class Register extends Component {\r\n\r\n    state = {\r\n        redirect: false,\r\n        alreadyRegistered: false,\r\n        open: false,\r\n        loginPage: false,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    // Update state whenever an input field is edited\r\n    handleFieldChange = evt => {\r\n        const stateToChange = {}\r\n        stateToChange[evt.target.id] = evt.target.value\r\n        this.setState(stateToChange)\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({open: false})\r\n    }\r\n\r\n    registerUser = (e) => {\r\n        e.preventDefault()\r\n        api.userRegister(this.state.email, this.state.password, this.state.firstName, this.state.lastName)\r\n        .then(res => {\r\n            console.log(res)\r\n            if (res === \"registered\"){\r\n                this.setState({\r\n                    open: true,\r\n                    firstName: \"\",\r\n                    lastName: \"\",\r\n                    password: \"\",\r\n                    email: \"\"\r\n                })\r\n            }\r\n            else {\r\n                sessionStorage.setItem(\"loginToken\", res)\r\n                this.setState({redirect: true})\r\n            }\r\n        })\r\n    }\r\n\r\n    backToLogin = () => {\r\n        this.setState({redirect: true})\r\n    }\r\n\r\n    render(){\r\n        if (!this.state.redirect){\r\n            return (\r\n                <React.Fragment>\r\n                    <div style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center', marginTop:30}}>\r\n                <span><Typography variant=\"h1\">CHATTR</Typography></span>\r\n                <img src={Lips} alt=\"teeth\" style={{height:300}}/>\r\n                    <h1>Register for Chattr</h1>\r\n                    <form onSubmit={this.registerUser}>\r\n                    <div style={{display:'flex',flexDirection:'row',justifyContent:\"space-around\"}}>\r\n                        <TextField\r\n                            id=\"firstName\"\r\n                            label=\"First Name\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.firstName}\r\n                            autoFocus\r\n                            required\r\n                            style={{margin:10}}\r\n                            onChange={this.handleFieldChange}\r\n                        />\r\n                        <TextField\r\n                            id=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.lastName}\r\n                            required\r\n                            style={{margin:10}}\r\n                            onChange={this.handleFieldChange}\r\n                        />\r\n                        </div>\r\n                        <div style={{display:'flex',flexDirection:'row',justifyContent:\"space-around\"}}>\r\n                        <TextField\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.email}\r\n                            require\r\n                            style={{margin:10}}\r\n                            onChange={this.handleFieldChange}\r\n                        />\r\n                        <TextField\r\n                            id=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.password}\r\n                            required\r\n                            style={{margin:10}}\r\n                            onChange={this.handleFieldChange}\r\n                        />\r\n                        </div>\r\n                        <div style={{display:'flex',flexDirection:'row',justifyContent:\"space-around\"}}>\r\n                        <Button variant=\"contained\" color=\"primary\" id=\"registerButton\" type=\"submit\">Create Account</Button>\r\n                        <Button variant=\"outlined\" color=\"inherit\" onClick={this.backToLogin}>Back to Login</Button>\r\n                        </div>\r\n                    </form>\r\n                    </div>\r\n                    \r\n                    {/* <-----------------Alert Dialog if user is already registered --------------------------------------------->*/}\r\n                    <Dialog \r\n                        open={this.state.open}\r\n                        onClose={this.handleClose}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"User Exists\"}</DialogTitle>\r\n                         <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                                I'm sorry, that email address is already registered\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                            Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                </React.Fragment>\r\n\r\n            )\r\n        }\r\n        else {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst classes = {\r\n    avatar: {\r\n        display: \"inline-block\"\r\n    }\r\n}\r\n\r\nconst PopulateChatroomList = (props) => {\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {(props.messages) \r\n                ? props.messages.map((message, index) => \r\n                    <li className={classes.avatar} key={index}><div style={{display:'inline-flex', justifyContent:'flex-start'}}>{\r\n                        (message.user.avatarUrl) \r\n                        ? <Avatar src={message.user.avatarUrl}/> \r\n                        : <AccountCircle style={{height:40,width:40}}/>}\r\n                        <Typography color=\"inherit\" variant=\"h6\">{message.user.firstName} {message.user.lastName}: {message.messageText}</Typography>\r\n                        </div>\r\n                        </li>) \r\n                : null}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withStyles(classes)(PopulateChatroomList)\r\n","import React, { Component } from 'react';\r\nimport './Chatroom.css';\r\nimport PreviousMessages from \"./PreviousMessages\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport 'typeface-roboto';\r\n\r\nexport default class Chatroom extends Component {\r\n\r\n    state = {\r\n        messages: [],\r\n        messageField: \"\",\r\n    }\r\n\r\n      handleFieldChange = evt => {\r\n        const stateToChange = {}\r\n        stateToChange[evt.target.id] = evt.target.value\r\n        this.setState(stateToChange)\r\n      }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <Paper elevation=\"2\" square=\"true\">\r\n            <div id=\"main\">\r\n                <div id=\"message-box\">\r\n                <ul>\r\n                <PreviousMessages messages={this.props.previousMessages} />\r\n                    {this.props.messages.map((message,index) => {\r\n                        return <li key={index}><div style={{display:'inline-flex',justifyContent:'flex-start'}}>\r\n                            {(message.avatar !== \"null\" || message.avatar === \"\") \r\n                            ? <Avatar src={message.avatar} /> \r\n                            : <AccountCircle style={{height:40,width:40}}/>}\r\n                            <Typography variant=\"h6\" color=\"inherit\">{message.user}: {message.message}</Typography>\r\n                            </div>\r\n                        </li>}\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        <form onSubmit={(e) => {\r\n            e.preventDefault() \r\n            if(this.state.messageField === \"\"){\r\n                alert(\"Message can not be blank\")\r\n                return\r\n            }\r\n            else {\r\n            this.props.sendMessage(e, this.state.messageField)\r\n            this.setState({messageField: \"\"})\r\n            }\r\n                }}>\r\n                <input \r\n                    id=\"messageField\" \r\n                    autoFocus \r\n                    autoComplete=\"off\" \r\n                    type=\"text\" \r\n                    placeholder=\"message\" \r\n                    value={this.state.messageField} \r\n                    style={{paddingLeft:10, width:'99.3%'}}\r\n                    onInput={e => this.handleFieldChange(e)}>\r\n                </input>\r\n                </form>\r\n      </div>\r\n      </Paper>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Add from \"@material-ui/icons/Add\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport RemoveCircle from \"@material-ui/icons/RemoveCircle\"\r\nimport api from \"../Api/Api\"\r\n\r\n\r\nconst classes = {\r\n    list: {\r\n        width: 250,\r\n      },  \r\n}\r\n\r\n\r\nclass PopulateChatroomList extends Component {\r\n    state = {\r\n        open: false,\r\n        redirect: false\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n    \r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleFieldChange = evt => {\r\n        const stateToChange = {}\r\n        stateToChange[evt.target.id] = evt.target.value\r\n        this.setState(stateToChange)\r\n    }\r\n\r\n    createNewChatRoom = (token, chatName) => {\r\n        if (this.state.name == null){\r\n            alert(\"chatroom name cannot be null\")\r\n        }\r\n        else {\r\n            let token = sessionStorage.getItem(\"loginToken\")\r\n            api.createChatRoom(token, this.state.name, this.props.user.id).then(res => {\r\n                console.log(res)\r\n                this.props.joinChatAfterCreate(this.state.name)\r\n            })\r\n        }\r\n    }\r\n\r\n    removeChatroom = (e) => {\r\n        console.log(e.currentTarget.id)\r\n        const token = sessionStorage.getItem(\"loginToken\")\r\n        api.deleteChatRoom(token, e.currentTarget.id).then(res => {\r\n            console.log(res)\r\n            this.props.removeAllUsersFromChat(res.title)\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        if (this.state.open === false){\r\n        return (   \r\n            <div className={classes.list}>\r\n                <List>\r\n                    <Typography variant=\"display1\" style={{margin:20}}>Chat Rooms</Typography>\r\n                    <Divider />\r\n                    {this.props.chatrooms.map((room, index) => (\r\n                    <div key={index}>\r\n                        <ListItem button key={room.title} onClick={() => this.props.toggleDrawer(false)}>\r\n                        <ListItemText primary={room.title} id={room.title} onClick={(e) => {\r\n                            this.props.clearMessages()                        \r\n                            this.props.removeFromChatroom()\r\n                            this.props.setCurrentChatroom(e, e.currentTarget.id)\r\n                        }} />\r\n                        {(this.props.user.id === room.userId) ? <RemoveCircle id={room.chatroomId} onClick={this.removeChatroom} color=\"secondary\"></RemoveCircle> : null}\r\n                        </ListItem>\r\n                        </div>\r\n            ))}\r\n            </List>\r\n            {/* <IconButton onClick={() => {this.handleClickOpen();}}><Add /></IconButton> */}\r\n            <Button variant=\"fab\" color=\"primary\" aria-label=\"add\" style={{margin:20}} onClick={() => {this.handleClickOpen();}}><Add /></Button>\r\n        </div>\r\n        )}\r\n\r\n        /*------------------------------------------Dialog for creating chat room ------------------------------------*/\r\n        else if (this.state.open === true){\r\n            return (\r\n                <React.Fragment>\r\n                <Dialog\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">Create New Chat Room</DialogTitle>\r\n                <DialogContent>\r\n                <DialogContentText>\r\n                    Please enter a title for the room\r\n                </DialogContentText>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"name\"\r\n                    label=\"Chat Name\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    autoComplete=\"off\"\r\n                    onChange={this.handleFieldChange}\r\n                />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={this.handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"raised\" onClick={() => { this.props.toggleDrawer(); this.handleClose(); this.createNewChatRoom()}} color=\"primary\">\r\n                    Create\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            </React.Fragment>\r\n            )\r\n        }\r\n        else if (this.state.redirect === true){\r\n            return (\r\n                <Redirect to=\"/\" />\r\n            )\r\n        }\r\n        }\r\n}\r\n\r\n    export default withStyles(classes)(PopulateChatroomList)\r\n","import React from 'react';\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport api from \"../Api/Api\"\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Chatroom from \"../Chatroom/Chatroom\"\r\nimport { HubConnectionBuilder, LogLevel } from \"@aspnet/signalr\"\r\nimport PopulateChatroomList from \"../Chatroom/PopulateChatroomList\"\r\nimport 'typeface-roboto';\r\nimport Lips from \"../img/lips.png\"\r\n\r\n//use new materialUI typography variants\r\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\r\n\r\nconst ipAddr = \"localhost\"\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  plusIcon: {\r\n    display: 'inline'\r\n  },\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n  headline: {\r\n    display: 'block'\r\n  },\r\n  // avatar: {\r\n  //   borderRadius: '40%',\r\n  // }\r\n};\r\n\r\nclass MainPage extends React.Component {\r\n  state = {\r\n    auth: true,\r\n    anchorEl: null,\r\n    user: {},\r\n    logout: false,\r\n    showDrawer: false,\r\n    settingsPage: false,\r\n    chatrooms: [],\r\n    currentChatroom: \"\",\r\n    messages: [],\r\n    previousMessages: [] \r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const userToken = sessionStorage.getItem(\"loginToken\")\r\n    api.userDetails(userToken).then(res => this.setState( (prevState) => {return {user: res}}))\r\n    api.getAllChatrooms(userToken).then(res => this.setState({chatrooms: res, userToken: userToken})).then(console.log(this.state.chatrooms))\r\n\r\n    const hubConnection = new HubConnectionBuilder()\r\n        .withUrl(`http://${ipAddr}:5555/Hubs/ChatHub`)\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n\r\n      this.setState({ hubConnection }, () => {\r\n            this.state.hubConnection\r\n            .start({withCredentials: false})\r\n            .then(() => console.log('Connection started!'))\r\n            .catch(err => console.log('Error while establishing connection :('));\r\n        \r\n        });\r\n        \r\n        hubConnection.on(\"downloadMessage\", (incomingMessage, groupName) =>{\r\n            // this.receiveMessage(incomingMessage, groupName)\r\n            console.log(groupName)\r\n            let newMessage = this.state.messages\r\n            newMessage.push(incomingMessage)\r\n            // this.setState({messages: newMessage})\r\n            this.setState((prevState) => {\r\n              return {messages: newMessage}\r\n            })\r\n        })\r\n\r\n        hubConnection.on(\"downloadPreviousMessages\", chatroomName => {\r\n            const userToken = sessionStorage.getItem(\"loginToken\")\r\n            api.getPreviousChatroomMessages(userToken, this.state.currentChatroom).then(res => this.setState({previousMessages: res}))\r\n        })\r\n\r\n        hubConnection.on(\"chatClosed\", groupName => {\r\n          alert(\"This chat has ended.\")\r\n          this.removeFromChatroom()\r\n        })\r\n      \r\n  }\r\n\r\n  removeAllUsersFromChat = (groupName) => {\r\n    this.state.hubConnection.invoke(\"RemoveAllUsersFromChat\", groupName)\r\n  }\r\n\r\n  removeFromChatroom = () => {\r\n    if (this.state.currentChatroom){\r\n      this.state.hubConnection.invoke(\"RemoveFromChat\", this.state.currentChatroom, `${this.state.user.firstName} ${this.state.user.lastName}`)\r\n      this.setState({currentChatroom: \"\"})\r\n    }\r\n  }\r\n\r\n  getUpdatedUserInfo = () => {\r\n    const userToken = sessionStorage.getItem(\"loginToken\")\r\n    api.userDetails(userToken).then(res => this.setState({user: res}))\r\n  }\r\n\r\n  sendMessage = (e, message) => {\r\n    e.preventDefault()\r\n    const userToken = sessionStorage.getItem(\"loginToken\")\r\n    let user = `${this.state.user.firstName} ${this.state.user.lastName}`\r\n    let avatar = `${this.state.user.avatarUrl}`\r\n    let newMessage = {\r\n      user: user,\r\n      avatar: avatar,\r\n      message: message\r\n    }\r\n    console.log(\"sending message\", message)\r\n    if (this.state.hubConnection){\r\n      console.log(\"Sending message\")\r\n      this.state.hubConnection.invoke(\"NewMessage\", newMessage, this.state.currentChatroom,).catch(err => console.error(err.toString()))\r\n      api.writeMessageToDb(newMessage.message, this.state.currentChatroom, this.state.user.id, userToken)\r\n    }\r\n  \r\n  }\r\n\r\n  clearMessagesOnRoomChange = () => {\r\n    this.setState({messages: []})\r\n  }\r\n  \r\n\r\n  toggleDrawer = (open) => {\r\n    api.getAllChatrooms(this.state.userToken).then(res => this.setState({chatrooms: res, showDrawer: open}))\r\n  };\r\n\r\n  logout = () => {\r\n    sessionStorage.removeItem(\"loginToken\")\r\n    this.setState({logout: true})\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ auth: event.target.checked });\r\n  };\r\n\r\n  handleMenu = event => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  setCurrentChatroom = (e, room) => {\r\n    let joinMessage = {\r\n      avatar: this.state.user.avatarUrl,\r\n      user: `${this.state.user.firstName} ${this.state.user.lastName}`,\r\n      message: `Has joined ${e.currentTarget.id}`\r\n    }\r\n    this.state.hubConnection.invoke(\"AddToGroup\", e.currentTarget.id, joinMessage)\r\n    this.setState(() => {\r\n      return {currentChatroom: room}\r\n    })\r\n  }\r\n\r\n  joinChatAfterCreate = (room) => {\r\n    if (this.state.currentChatroom)\r\n    {\r\n      this.removeFromChatroom()\r\n    }\r\n    let joinMessage = {\r\n      avatar: this.state.user.avatarUrl,\r\n      user: `${this.state.user.firstName} ${this.state.user.lastName}`,\r\n      message: `Has joined ${room}`\r\n    } \r\n    this.state.hubConnection.invoke(\"AddToGroup\", room, joinMessage)\r\n    this.setState(() => {\r\n      return {\r\n        currentChatroom: room, \r\n        messages: []\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { auth, anchorEl } = this.state;\r\n    const open = Boolean(anchorEl);\r\n    const sideList = (\r\n      <PopulateChatroomList \r\n        toggleDrawer={this.toggleDrawer}\r\n        user={this.state.user}\r\n        setCurrentChatroom={this.setCurrentChatroom}\r\n        hubConnection={this.state.hubConnection}\r\n        chatrooms={this.state.chatrooms}\r\n        clearMessages={this.clearMessagesOnRoomChange}\r\n        removeFromChatroom={this.removeFromChatroom}\r\n        removeAllUsersFromChat={this.removeAllUsersFromChat}\r\n        joinChatAfterCreate={this.joinChatAfterCreate}\r\n      />\r\n    )\r\n\r\n    return (\r\n      (this.state.logout) \r\n      ? \r\n      <Redirect to=\"/\" /> \r\n      :\r\n        (this.state.settingsPage)\r\n          ?\r\n          // <Redirect to=\"/userSettings\"/>\r\n          <Redirect to={{\r\n            pathname: '/userSettings',\r\n            props: {getUpdatedInfo: this.getUpdatedUserInfo}\r\n          }} />\r\n          \r\n      :\r\n      <React.Fragment>\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={() => this.toggleDrawer(true)}>\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Drawer open={this.state.showDrawer} onClose={() => this.toggleDrawer(false)}>\r\n          <div\r\n            tabIndex={0}\r\n            role=\"button\"\r\n            onClick={() => this.toggleDrawer(false)}\r\n            onKeyDown={() => this.toggleDrawer(false)}\r\n          >\r\n          </div>\r\n          {sideList}\r\n        </Drawer>\r\n            <Typography variant=\"h5\" color=\"inherit\" className={classes.grow}>\r\n              {(this.state.user) ? `${this.state.user.firstName} ${this.state.user.lastName}` : \"\"}\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"inherit\" className={classes.grow}>\r\n              {(this.state.currentChatroom) ? `Chatting in: ${this.state.currentChatroom}` : \"\"}\r\n            </Typography>\r\n            {auth && (\r\n              <div>\r\n                <IconButton\r\n                  aria-owns={open ? 'menu-appbar' : null}\r\n                  aria-haspopup=\"true\"\r\n                  onClick={this.handleMenu}\r\n                  color=\"inherit\"\r\n                >\r\n                  {(this.state.user.avatarUrl) ? <Avatar src={this.state.user.avatarUrl} /> : <AccountCircle style={{height:40,width:40}}/>}\r\n                </IconButton>\r\n                <Menu\r\n                  id=\"menu-appbar\"\r\n                  anchorEl={anchorEl}\r\n                  anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  open={open}\r\n                  onClose={this.handleClose}\r\n                >\r\n                  <MenuItem onClick={() => {\r\n                    this.setState({settingsPage: true})\r\n                    this.handleClose()}}>\r\n                    Profile\r\n                  </MenuItem>\r\n                  <MenuItem onClick={() => {\r\n                    this.handleClose()\r\n                    this.logout()}}>\r\n                    Logout\r\n                  </MenuItem>\r\n                </Menu>\r\n              </div>\r\n            )}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n      <div>\r\n        {(this.state.currentChatroom) \r\n          ? <Chatroom \r\n              currentRoom={this.state.currentChatroom} \r\n              messages={this.state.messages} \r\n              sendMessage={this.sendMessage} \r\n              previousMessages={this.state.previousMessages} /> \r\n          : <div style={{marginTop:50}}>\r\n              <Typography variant=\"h2\" color=\"textPrimary\" align=\"center\">Welcome to Chattr!</Typography>\r\n              <Typography align=\"center\"><img src={Lips} alt=\"lips\" style={{height:200}}></img></Typography>\r\n              <Typography variant=\"h4\" color=\"textSecondary\" align=\"center\">Please select a chat room from the left menu</Typography>\r\n            </div>}\r\n      </div>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(MainPage);","import React, { Component } from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport api from \"../Api/Api\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport 'typeface-roboto';\r\nimport Lips from \"../img/lips.png\"\r\n\r\nclass UserSettings extends Component {\r\n\r\n    state = {\r\n        redirect: false,\r\n        open: false,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        avatarUrl: \"\",\r\n        user: {},\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const userToken = sessionStorage.getItem(\"loginToken\")\r\n        api.userDetails(userToken).then(res => this.setState({ user: res }))\r\n    }\r\n\r\n    // Update state whenever an input field is edited\r\n    handleFieldChange = evt => {\r\n        const stateToChange = {}\r\n        stateToChange[evt.target.id] = evt.target.value\r\n        this.setState(stateToChange)\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false })\r\n    }\r\n\r\n    submitChanges = () => {\r\n        const userToken = sessionStorage.getItem(\"loginToken\")\r\n        const edits = {\r\n            Id: this.state.user.id,\r\n            firstName: (this.state.firstName) ? this.state.firstName : this.state.user.firstName,\r\n            lastName: (this.state.lastName) ? this.state.lastName : this.state.user.lastName,\r\n            avatarUrl: (this.state.avatarUrl) ? this.state.avatarUrl : this.state.user.avatarUrl,\r\n            isActive: true\r\n        }\r\n\r\n        api.editUser(userToken, edits, this.state.user.id)\r\n            .then(e =>\r\n                this.setState((prevState) => {\r\n                    this.props.location.props.getUpdatedInfo()\r\n                    return { redirect: !prevState.redirect }\r\n                })\r\n            )\r\n\r\n    }\r\n\r\n    setUserInactive = () => {\r\n        const userToken = sessionStorage.getItem(\"loginToken\")\r\n        const edits = {\r\n            Id: this.state.user.id,\r\n            firstName: (this.state.firstName) ? this.state.firstName : this.state.user.firstName,\r\n            lastName: (this.state.lastName) ? this.state.lastName : this.state.user.lastName,\r\n            avatarUrl: (this.state.avatarUrl) ? this.state.avatarUrl : this.state.user.avatarUrl,\r\n            isActive: false\r\n        }\r\n\r\n        api.editUser(userToken, edits, this.state.user.id)\r\n            .then(() => {\r\n                sessionStorage.removeItem(\"loginToken\")\r\n                this.setState((prevState) => { return { redirect: !prevState.redirect } })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.redirect) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Grid\r\n                        containter\r\n                        spacing={0}\r\n                        direction=\"column\"\r\n                        alignItems=\"center\"\r\n                        justify=\"center\"\r\n                        style={{ minHeight: '100vh' }}\r\n                    >\r\n                        {/* <div classes={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'}}> */}\r\n                        <Grid item>\r\n                            <Typography variant=\"h3\" style={{ margin: 40 }} align=\"center\">Change Account Information</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography align=\"center\"><img src={Lips} alt=\"lips\" style={{ height: 200 }}></img></Typography>\r\n                        </Grid>\r\n                        <form onSubmit={(e) => { e.preventDefault(); this.submitChanges() }}>\r\n                            <Grid item align=\"center\">\r\n                                <TextField\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    type=\"text\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"standard\"\r\n                                    defaultValue={this.state.user.firstName}\r\n                                    // InputLabelProps={{ shrink: true }}\r\n                                    autoFocus\r\n                                    onChange={this.handleFieldChange}\r\n                                    style={{ margin: 25 }}\r\n                                />\r\n                                <TextField\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    type=\"text\"\r\n                                    name=\"lastName\"\r\n                                    variant=\"standard\"\r\n                                    defaultValue={this.state.user.lastName}\r\n                                    // InputLabelProps={{ shrink: true }}\r\n                                    onChange={this.handleFieldChange}\r\n                                    style={{ margin: 25 }}\r\n                                />\r\n                                <TextField\r\n                                    id=\"avatarUrl\"\r\n                                    label=\"Avatar Url\"\r\n                                    type=\"text\"\r\n                                    name=\"avatarUrl\"\r\n                                    variant=\"standard\"\r\n                                    defaultValue={this.state.user.avatarUrl}\r\n                                    // InputLabelProps={{ shrink: true }}\r\n                                    onChange={this.handleFieldChange}\r\n                                    style={{ margin: 25 }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item align=\"center\">\r\n                                <Button variant=\"contained\" color=\"primary\" id=\"registerButton\" type=\"submit\">\r\n                                    {(this.state.firstName !== \"\" || this.state.lastName !== \"\" || this.state.avatarUrl !== \"\")\r\n                                        ? \"Submit Changes\"\r\n                                        : \"Back Home\"\r\n                                    }\r\n                                </Button>\r\n                            </Grid>\r\n                        </form>\r\n\r\n                        <Grid item align=\"center\">\r\n                            <Button variant=\"text\" color=\"secondary\" style={{ marginTop: 30, fontSize: '1.2rem' }} onClick={() => this.setState({ open: true })}>Delete Account</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    {/* <-----------------Alert Dialog if user wants to delete account --------------------------------------------->*/}\r\n                    <Dialog\r\n                        open={this.state.open}\r\n                        onClose={this.handleClose}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                    >\r\n                        <DialogContent>\r\n                            {/* <DialogContentText id=\"alert-dialog-description\"> */}\r\n                            <Typography variant=\"h4\" color=\"secondary\">Are you sure you want to delete your account?</Typography>\r\n                            <Typography variant=\"h6\">This action cannot be undone</Typography>\r\n                            {/* </DialogContentText> */}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">Cancel</Button>\r\n                            <Button color=\"secondary\" variant=\"contained\" onClick={this.setUserInactive}>Confirm Delete</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                </React.Fragment>\r\n\r\n            )\r\n        }\r\n        else {\r\n            return <Redirect to={{\r\n                pathname: '/',\r\n                state: { user: this.state.user }\r\n            }} />\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserSettings;","import React, { Component } from 'react'\r\nimport {Route} from \"react-router-dom\"\r\nimport Login from \"./Components/Login/Login\"\r\nimport Register from \"./Components/Login/Register\"\r\nimport MainPage from \"./Components/MainPage/MainPage\"\r\nimport UserSettings from \"./Components/Login/UserSettings\"\r\n\r\nexport default class ApplicationViews extends Component {\r\n\r\n    isAuthenticated = () => {\r\n        return sessionStorage.getItem(\"loginToken\")\r\n    }\r\n\r\n    showSideMenu = () => {\r\n        this.setState({sideMenu: true})\r\n    }\r\n    \r\n    render(){\r\n        if (!this.isAuthenticated()){\r\n            return (\r\n                <React.Fragment>\r\n                    <Route exact path=\"/\" component={Login} />\r\n                    <Route exact path=\"/register\" component={Register} />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <React.Fragment>\r\n                    <Route exact path=\"/\" component={MainPage} />\r\n                    <Route exact path=\"/userSettings\" component={UserSettings} />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ApplicationViews from \"./ApplicationViews\"\r\n// import 'typeface-roboto'\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ApplicationViews />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from \"react-router-dom\"\r\nimport App from \"./App\"\r\nimport 'typeface-roboto';\r\n// import { serviceWorker } from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <Router>\r\n    <App />\r\n    </Router>,\r\n     document.getElementById('root'));\r\n\r\n// serviceWorker();","module.exports = __webpack_public_path__ + \"static/media/lips.02d19b83.png\";"],"sourceRoot":""}